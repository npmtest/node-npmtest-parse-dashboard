{"/home/travis/build/npmtest/node-npmtest-parse-dashboard/test.js":"/* istanbul instrument in package npmtest_parse_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-dashboard/lib.npmtest_parse_dashboard.js":"/* istanbul instrument in package npmtest_parse_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_parse_dashboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_parse_dashboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-dashboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-parse-dashboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_parse_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_parse_dashboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_parse_dashboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_parse_dashboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_parse_dashboard.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_parse_dashboard.__dirname +\n                    '/lib.npmtest_parse_dashboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-dashboard/node_modules/parse-dashboard/Parse-Dashboard/app.js":"'use strict';\nconst express = require('express');\nconst path = require('path');\nconst packageJson = require('package-json');\nconst csrf = require('csurf');\nconst Authentication = require('./Authentication.js');\nvar fs = require('fs');\n\nconst currentVersionFeatures = require('../package.json').parseDashboardFeatures;\n\nvar newFeaturesInLatestVersion = [];\npackageJson('parse-dashboard', 'latest').then(latestPackage => {\n  if (latestPackage.parseDashboardFeatures instanceof Array) {\n    newFeaturesInLatestVersion = latestPackage.parseDashboardFeatures.filter(feature => {\n      return currentVersionFeatures.indexOf(feature) === -1;\n    });\n  }\n});\n\nfunction getMount(mountPath) {\n  mountPath = mountPath || '';\n  if (!mountPath.endsWith('/')) {\n    mountPath += '/';\n  }\n  return mountPath;\n}\n\nfunction checkIfIconsExistForApps(apps, iconsFolder) {\n  for (var i in apps) {\n    var currentApp = apps[i];\n    var iconName = currentApp.iconName;\n    var path = iconsFolder + \"/\" + iconName;\n\n    fs.stat(path, function(err, stat) {\n      if (err) {\n          if ('ENOENT' == err.code) {// file does not exist\n              console.warn(\"Icon with file name: \" + iconName +\" couldn't be found in icons folder!\");\n          } else {\n            console.log(\n              'An error occurd while checking for icons, please check permission!');\n          }\n      } else {\n          //every thing was ok so for example you can read it and send it to client\n      }\n  } );\n  }\n}\n\nmodule.exports = function(config, allowInsecureHTTP) {\n  var app = express();\n  // Serve public files.\n  app.use(express.static(path.join(__dirname,'public')));\n\n  // Allow setting via middleware\n  if (config.trustProxy && app.disabled('trust proxy')) {\n    app.enable('trust proxy');\n  }\n\n  // wait for app to mount in order to get mountpath\n  app.on('mount', function() {\n    const mountPath = getMount(app.mountpath);\n    const users = config.users;\n    const useEncryptedPasswords = config.useEncryptedPasswords ? true : false;\n    const authInstance = new Authentication(users, useEncryptedPasswords, mountPath);\n    authInstance.initialize(app);\n\n    // CSRF error handler\n    app.use(function (err, req, res, next) {\n      if (err.code !== 'EBADCSRFTOKEN') return next(err)\n\n      // handle CSRF token errors here\n      res.status(403)\n      res.send('form tampered with')\n    });\n\n    // Serve the configuration.\n    app.get('/parse-dashboard-config.json', function(req, res) {\n      let response = {\n        apps: config.apps,\n        newFeaturesInLatestVersion: newFeaturesInLatestVersion,\n      };\n\n      //Based on advice from Doug Wilson here:\n      //https://github.com/expressjs/express/issues/2518\n      const requestIsLocal =\n        req.connection.remoteAddress === '127.0.0.1' ||\n        req.connection.remoteAddress === '::ffff:127.0.0.1' ||\n        req.connection.remoteAddress === '::1';\n      if (!requestIsLocal && !req.secure && !allowInsecureHTTP) {\n        //Disallow HTTP requests except on localhost, to prevent the master key from being transmitted in cleartext\n        return res.send({ success: false, error: 'Parse Dashboard can only be remotely accessed via HTTPS' });\n      }\n\n      if (!requestIsLocal && !users) {\n        //Accessing the dashboard over the internet can only be done with username and password\n        return res.send({ success: false, error: 'Configure a user to access Parse Dashboard remotely' });\n      }\n\n      const authentication = req.user;\n\n      const successfulAuth = authentication && authentication.isAuthenticated;\n      const appsUserHasAccess = authentication && authentication.appsUserHasAccessTo;\n\n      if (successfulAuth) {\n        if (appsUserHasAccess) {\n          // Restric access to apps defined in user dictionary\n          // If they didn't supply any app id, user will access all apps\n          response.apps = response.apps.filter(function (app) {\n            return appsUserHasAccess.find(appUserHasAccess => {\n              return app.appId == appUserHasAccess.appId\n            })\n          });\n        }\n        // They provided correct auth\n        return res.json(response);\n      }\n\n      if (users) {\n        //They provided incorrect auth\n        return res.sendStatus(401);\n      }\n\n      //They didn't provide auth, and have configured the dashboard to not need auth\n      //(ie. didn't supply usernames and passwords)\n      if (requestIsLocal) {\n        //Allow no-auth access on localhost only, if they have configured the dashboard to not need auth\n        return res.json(response);\n      }\n      //We shouldn't get here. Fail closed.\n      res.send({ success: false, error: 'Something went wrong.' });\n    });\n\n    // Serve the app icons. Uses the optional `iconsFolder` parameter as\n    // directory name, that was setup in the config file.\n    // We are explicitly not using `__dirpath` here because one may be\n    // running parse-dashboard from globally installed npm.\n    if (config.iconsFolder) {\n      try {\n        var stat = fs.statSync(config.iconsFolder);\n        if (stat.isDirectory()) {\n          app.use('/appicons', express.static(config.iconsFolder));\n          //Check also if the icons really exist\n          checkIfIconsExistForApps(config.apps, config.iconsFolder);\n        }\n      } catch (e) {\n        // Directory doesn't exist or something.\n        console.warn(\"Iconsfolder at path: \" + config.iconsFolder +\n          \" not found!\");\n      }\n    }\n\n    app.get('/login', csrf(), function(req, res) {\n      if (!users || (req.user && req.user.isAuthenticated)) {\n        return res.redirect(`${mountPath}apps`);\n      }\n\n      let errors = req.flash('error');\n      if (errors && errors.length) {\n        errors = `<div id=\"login_errors\" style=\"display: none;\">\n          ${errors.join(' ')}\n        </div>`\n      }\n      res.send(`<!DOCTYPE html>\n        <head>\n          <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"${mountPath}favicon.ico\" />\n          <base href=\"${mountPath}\"/>\n          <script>\n            PARSE_DASHBOARD_PATH = \"${mountPath}\";\n          </script>\n        </head>\n        <html>\n          <title>Parse Dashboard</title>\n          <body>\n            <div id=\"login_mount\"></div>\n            ${errors}\n            <script id=\"csrf\" type=\"application/json\">\"${req.csrfToken()}\"</script>\n            <script src=\"${mountPath}bundles/login.bundle.js\"></script>\n          </body>\n        </html>\n      `);\n    });\n\n    // For every other request, go to index.html. Let client-side handle the rest.\n    app.get('/*', function(req, res) {\n      if (users && (!req.user || !req.user.isAuthenticated)) {\n        return res.redirect(`${mountPath}login`);\n      }\n      res.send(`<!DOCTYPE html>\n        <head>\n          <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"${mountPath}favicon.ico\" />\n          <base href=\"${mountPath}\"/>\n          <script>\n            PARSE_DASHBOARD_PATH = \"${mountPath}\";\n          </script>\n        </head>\n        <html>\n          <title>Parse Dashboard</title>\n          <body>\n            <div id=\"browser_mount\"></div>\n            <script src=\"${mountPath}bundles/dashboard.bundle.js\"></script>\n          </body>\n        </html>\n      `);\n    });\n  });\n\n  return app;\n}\n","/home/travis/build/npmtest/node-npmtest-parse-dashboard/node_modules/parse-dashboard/Parse-Dashboard/Authentication.js":"\"use strict\";\nvar bcrypt = require('bcryptjs');\nvar csrf = require('csurf');\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\n/**\n * Constructor for Authentication class\n *\n * @class Authentication\n * @param {Object[]} validUsers\n * @param {boolean} useEncryptedPasswords\n */\nfunction Authentication(validUsers, useEncryptedPasswords, mountPath) {\n  this.validUsers = validUsers;\n  this.useEncryptedPasswords = useEncryptedPasswords || false;\n  this.mountPath = mountPath;\n}\n\nfunction initialize(app) {\n  var self = this;\n  passport.use('local', new LocalStrategy(\n    function(username, password, cb) {\n      var match = self.authenticate({\n        name: username,\n        pass: password\n      });\n      if (!match.matchingUsername) {\n        return cb(null, false, { message: 'Invalid username or password' });\n      }\n      cb(null, match.matchingUsername);\n    })\n  );\n\n  passport.serializeUser(function(username, cb) {\n    cb(null, username);\n  });\n\n  passport.deserializeUser(function(username, cb) {\n    var user = self.authenticate({\n      name: username\n    }, true);\n    cb(null, user);\n  });\n\n  app.use(require('connect-flash')());\n  app.use(require('body-parser').urlencoded({ extended: true }));\n  app.use(require('cookie-session')({\n    key    : 'parse_dash',\n    secret : 'magic',\n    cookie : {\n      maxAge: (2 * 7 * 24 * 60 * 60 * 1000) // 2 weeks\n    }\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.post('/login',\n    csrf(),\n    passport.authenticate('local', {\n      successRedirect: `${self.mountPath}apps`,\n      failureRedirect: `${self.mountPath}login`,\n      failureFlash : true\n    })\n  );\n\n  app.get('/logout', function(req, res){\n    req.logout();\n    res.redirect(`${self.mountPath}login`);\n  });\n}\n\n/**\n * Authenticates the `userToTest`\n *\n * @param {Object} userToTest\n * @returns {Object} Object with `isAuthenticated` and `appsUserHasAccessTo` properties\n */\nfunction authenticate(userToTest, usernameOnly) {\n  var appsUserHasAccessTo = null;\n  var matchingUsername = null;\n\n  //they provided auth\n  let isAuthenticated = userToTest &&\n    //there are configured users\n    this.validUsers &&\n    //the provided auth matches one of the users\n    this.validUsers.find(user => {\n      let isAuthenticated = false;\n      let usernameMatches = userToTest.name == user.user;\n      let passwordMatches = this.useEncryptedPasswords && !usernameOnly ? bcrypt.compareSync(userToTest.pass, user.pass) : userToTest.pass == user.pass;\n      if (usernameMatches && (usernameOnly || passwordMatches)) {\n        isAuthenticated = true;\n        matchingUsername = user.user;\n        // User restricted apps\n        appsUserHasAccessTo = user.apps || null;\n      }\n\n      return isAuthenticated;\n    }) ? true : false;\n\n  return {\n    isAuthenticated,\n    matchingUsername,\n    appsUserHasAccessTo\n  };\n}\n\nAuthentication.prototype.initialize = initialize;\nAuthentication.prototype.authenticate = authenticate;\n\nmodule.exports = Authentication;\n"}